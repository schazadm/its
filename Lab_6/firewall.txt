#!/usr/sbin/nft -f

define iifc = eth1               # Interface name to internal network
define i4nw = 10.0.14.0/24       # Internal IPv4 network
define i4ad = 10.0.14.1          # Internal IPv4 address
define i6nw = 2001:db8:2:000e::/64  # Internal IPv6 network
define i6ad = 2001:db8:2:000e::1    # Internal IPv6 address

define eifc = eth0               # Interface name to external network
define e4nw = 192.168.14.0/25    # External IPv4 network
define e4ad = 192.168.14.1       # External IPv4 address
define e6nw = 2001:db8:3:000e::/64  # External IPv6 network
define e6ad = 2001:db8:3:000e::1    # External IPv6 address

define difc = eth2               # Interface name to DMZ network
define d4nw = 192.168.14.128/25  # DMZ IPv4 network
define d4ad = 192.168.14.129     # DMZ IPv4 address
define d6nw = 2001:db8:1:000e::/64  # DMZ IPv6 network
define d6ad = 2001:db8:1:000e::1    # DMZ IPv6 address

flush ruleset

table inet myfilter {
  chain myinput
  {
    type filter hook input priority 0; policy drop;
    #meta nftrace set 1
	
	# internal
    iifname $iifc ip saddr $i4nw icmp type echo-request accept;
	
	# dmz
    iifname $difc ip saddr $d4nw icmp type echo-request accept;
  }
  
  chain myoutput
  {
    type filter hook output priority 0; policy drop;
    #meta nftrace set 1
	
	#internal
    oifname $iifc ip daddr $i4nw icmp type echo-reply accept;
	
	#dmz
    oifname $difc ip daddr $d4nw icmp type echo-reply accept;
  }
  
  chain myforward
  {
    type filter hook forward priority 0; policy drop;
	
	# internal; accept ssh packets; only in; block incoming requests (flags != syn);
	iifname $iifc ip saddr $i4nw tcp sport {ssh} accept;
	oifname $iifc ip daddr $i4nw tcp dport {ssh} tcp flags != syn accept;
    
	# dmz; accept ssh packets; in and out
    oifname $difc ip daddr $d4nw tcp dport {ssh} accept;
    iifname $difc ip saddr $d4nw tcp sport {ssh} accept;
  }
}